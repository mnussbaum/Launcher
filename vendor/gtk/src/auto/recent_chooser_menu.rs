// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Buildable;
use Container;
use Menu;
use MenuShell;
use RecentChooser;
use RecentManager;
use Widget;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct RecentChooserMenu(Object<ffi::GtkRecentChooserMenu, ffi::GtkRecentChooserMenuClass, RecentChooserMenuClass>) @extends Menu, MenuShell, Container, Widget, @implements Buildable, RecentChooser;

    match fn {
        get_type => || ffi::gtk_recent_chooser_menu_get_type(),
    }
}

impl RecentChooserMenu {
    pub fn new() -> RecentChooserMenu {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_recent_chooser_menu_new()).unsafe_cast()
        }
    }

    pub fn new_for_manager<P: IsA<RecentManager>>(manager: &P) -> RecentChooserMenu {
        skip_assert_initialized!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_recent_chooser_menu_new_for_manager(manager.as_ref().to_glib_none().0)).unsafe_cast()
        }
    }
}

impl Default for RecentChooserMenu {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_RECENT_CHOOSER_MENU: Option<&RecentChooserMenu> = None;

pub trait RecentChooserMenuExt: 'static {
    fn get_show_numbers(&self) -> bool;

    fn set_show_numbers(&self, show_numbers: bool);

    fn connect_property_show_numbers_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<RecentChooserMenu>> RecentChooserMenuExt for O {
    fn get_show_numbers(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_recent_chooser_menu_get_show_numbers(self.as_ref().to_glib_none().0))
        }
    }

    fn set_show_numbers(&self, show_numbers: bool) {
        unsafe {
            ffi::gtk_recent_chooser_menu_set_show_numbers(self.as_ref().to_glib_none().0, show_numbers.to_glib());
        }
    }

    fn connect_property_show_numbers_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::show-numbers\0".as_ptr() as *const _,
                Some(transmute(notify_show_numbers_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn notify_show_numbers_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkRecentChooserMenu, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<RecentChooserMenu> {
    let f: &F = transmute(f);
    f(&RecentChooserMenu::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for RecentChooserMenu {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "RecentChooserMenu")
    }
}
