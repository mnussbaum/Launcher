// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Box;
use Buildable;
use Container;
use Orientable;
use RecentChooser;
use RecentManager;
use Widget;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct RecentChooserWidget(Object<ffi::GtkRecentChooserWidget, ffi::GtkRecentChooserWidgetClass, RecentChooserWidgetClass>) @extends Box, Container, Widget, @implements Buildable, Orientable, RecentChooser;

    match fn {
        get_type => || ffi::gtk_recent_chooser_widget_get_type(),
    }
}

impl RecentChooserWidget {
    pub fn new() -> RecentChooserWidget {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_recent_chooser_widget_new()).unsafe_cast()
        }
    }

    pub fn new_for_manager<P: IsA<RecentManager>>(manager: &P) -> RecentChooserWidget {
        skip_assert_initialized!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_recent_chooser_widget_new_for_manager(manager.as_ref().to_glib_none().0)).unsafe_cast()
        }
    }
}

impl Default for RecentChooserWidget {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_RECENT_CHOOSER_WIDGET: Option<&RecentChooserWidget> = None;

impl fmt::Display for RecentChooserWidget {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "RecentChooserWidget")
    }
}
