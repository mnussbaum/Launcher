// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Bin;
use Buildable;
use Container;
use Widget;
use Window;
use ffi;
use gdk;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use xlib;

glib_wrapper! {
    pub struct Plug(Object<ffi::GtkPlug, ffi::GtkPlugClass, PlugClass>) @extends Window, Bin, Container, Widget, @implements Buildable;

    match fn {
        get_type => || ffi::gtk_plug_get_type(),
    }
}

impl Plug {
    pub fn new(socket_id: xlib::Window) -> Plug {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_plug_new(socket_id)).unsafe_cast()
        }
    }

    pub fn new_for_display(display: &gdk::Display, socket_id: xlib::Window) -> Plug {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_plug_new_for_display(display.to_glib_none().0, socket_id)).unsafe_cast()
        }
    }
}

pub const NONE_PLUG: Option<&Plug> = None;

pub trait PlugExt: 'static {
    fn construct(&self, socket_id: xlib::Window);

    fn construct_for_display(&self, display: &gdk::Display, socket_id: xlib::Window);

    fn get_embedded(&self) -> bool;

    fn get_id(&self) -> xlib::Window;

    fn get_socket_window(&self) -> Option<gdk::Window>;

    fn connect_embedded<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_embedded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_socket_window_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Plug>> PlugExt for O {
    fn construct(&self, socket_id: xlib::Window) {
        unsafe {
            ffi::gtk_plug_construct(self.as_ref().to_glib_none().0, socket_id);
        }
    }

    fn construct_for_display(&self, display: &gdk::Display, socket_id: xlib::Window) {
        unsafe {
            ffi::gtk_plug_construct_for_display(self.as_ref().to_glib_none().0, display.to_glib_none().0, socket_id);
        }
    }

    fn get_embedded(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_plug_get_embedded(self.as_ref().to_glib_none().0))
        }
    }

    fn get_id(&self) -> xlib::Window {
        unsafe {
            ffi::gtk_plug_get_id(self.as_ref().to_glib_none().0)
        }
    }

    fn get_socket_window(&self) -> Option<gdk::Window> {
        unsafe {
            from_glib_none(ffi::gtk_plug_get_socket_window(self.as_ref().to_glib_none().0))
        }
    }

    fn connect_embedded<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"embedded\0".as_ptr() as *const _,
                Some(transmute(embedded_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_embedded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::embedded\0".as_ptr() as *const _,
                Some(transmute(notify_embedded_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_socket_window_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::socket-window\0".as_ptr() as *const _,
                Some(transmute(notify_socket_window_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn embedded_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkPlug, f: glib_ffi::gpointer)
where P: IsA<Plug> {
    let f: &F = transmute(f);
    f(&Plug::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_embedded_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkPlug, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Plug> {
    let f: &F = transmute(f);
    f(&Plug::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_socket_window_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkPlug, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Plug> {
    let f: &F = transmute(f);
    f(&Plug::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for Plug {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Plug")
    }
}
