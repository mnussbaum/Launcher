// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Bin;
use Buildable;
use Container;
use ToolItem;
use Widget;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct SeparatorToolItem(Object<ffi::GtkSeparatorToolItem, ffi::GtkSeparatorToolItemClass, SeparatorToolItemClass>) @extends ToolItem, Bin, Container, Widget, @implements Buildable;

    match fn {
        get_type => || ffi::gtk_separator_tool_item_get_type(),
    }
}

impl SeparatorToolItem {
    pub fn new() -> SeparatorToolItem {
        assert_initialized_main_thread!();
        unsafe {
            ToolItem::from_glib_none(ffi::gtk_separator_tool_item_new()).unsafe_cast()
        }
    }
}

impl Default for SeparatorToolItem {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SEPARATOR_TOOL_ITEM: Option<&SeparatorToolItem> = None;

pub trait SeparatorToolItemExt: 'static {
    fn get_draw(&self) -> bool;

    fn set_draw(&self, draw: bool);

    fn connect_property_draw_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SeparatorToolItem>> SeparatorToolItemExt for O {
    fn get_draw(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_separator_tool_item_get_draw(self.as_ref().to_glib_none().0))
        }
    }

    fn set_draw(&self, draw: bool) {
        unsafe {
            ffi::gtk_separator_tool_item_set_draw(self.as_ref().to_glib_none().0, draw.to_glib());
        }
    }

    fn connect_property_draw_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::draw\0".as_ptr() as *const _,
                Some(transmute(notify_draw_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn notify_draw_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkSeparatorToolItem, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<SeparatorToolItem> {
    let f: &F = transmute(f);
    f(&SeparatorToolItem::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for SeparatorToolItem {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SeparatorToolItem")
    }
}
