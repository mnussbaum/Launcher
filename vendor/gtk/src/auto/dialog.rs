// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Bin;
use Box;
use Buildable;
use Container;
use ResponseType;
use Widget;
use Window;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Dialog(Object<ffi::GtkDialog, ffi::GtkDialogClass, DialogClass>) @extends Window, Bin, Container, Widget, @implements Buildable;

    match fn {
        get_type => || ffi::gtk_dialog_get_type(),
    }
}

impl Dialog {
    pub fn new() -> Dialog {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_dialog_new()).unsafe_cast()
        }
    }

    //pub fn new_with_buttons<'a, 'b, 'c, P: Into<Option<&'a str>>, Q: IsA<Window> + 'b, R: Into<Option<&'b Q>>, S: Into<Option<&'c str>>>(title: P, parent: R, flags: DialogFlags, first_button_text: S, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> Dialog {
    //    unsafe { TODO: call ffi::gtk_dialog_new_with_buttons() }
    //}
}

impl Default for Dialog {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_DIALOG: Option<&Dialog> = None;

pub trait DialogExt: 'static {
    fn add_action_widget<P: IsA<Widget>>(&self, child: &P, response_id: ResponseType);

    fn add_button(&self, button_text: &str, response_id: ResponseType) -> Widget;

    //fn add_buttons(&self, first_button_text: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs);

    fn get_content_area(&self) -> Box;

    fn get_header_bar(&self) -> Option<Widget>;

    fn get_response_for_widget<P: IsA<Widget>>(&self, widget: &P) -> i32;

    fn get_widget_for_response(&self, response_id: ResponseType) -> Option<Widget>;

    fn response(&self, response_id: ResponseType);

    fn run(&self) -> i32;

    fn set_default_response(&self, response_id: ResponseType);

    fn set_response_sensitive(&self, response_id: ResponseType, setting: bool);

    fn get_property_use_header_bar(&self) -> i32;

    fn connect_close<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_close(&self);

    fn connect_response<F: Fn(&Self, ResponseType) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Dialog>> DialogExt for O {
    fn add_action_widget<P: IsA<Widget>>(&self, child: &P, response_id: ResponseType) {
        unsafe {
            ffi::gtk_dialog_add_action_widget(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0, response_id.to_glib());
        }
    }

    fn add_button(&self, button_text: &str, response_id: ResponseType) -> Widget {
        unsafe {
            from_glib_none(ffi::gtk_dialog_add_button(self.as_ref().to_glib_none().0, button_text.to_glib_none().0, response_id.to_glib()))
        }
    }

    //fn add_buttons(&self, first_button_text: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
    //    unsafe { TODO: call ffi::gtk_dialog_add_buttons() }
    //}

    fn get_content_area(&self) -> Box {
        unsafe {
            from_glib_none(ffi::gtk_dialog_get_content_area(self.as_ref().to_glib_none().0))
        }
    }

    fn get_header_bar(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_dialog_get_header_bar(self.as_ref().to_glib_none().0))
        }
    }

    fn get_response_for_widget<P: IsA<Widget>>(&self, widget: &P) -> i32 {
        unsafe {
            ffi::gtk_dialog_get_response_for_widget(self.as_ref().to_glib_none().0, widget.as_ref().to_glib_none().0)
        }
    }

    fn get_widget_for_response(&self, response_id: ResponseType) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_dialog_get_widget_for_response(self.as_ref().to_glib_none().0, response_id.to_glib()))
        }
    }

    fn response(&self, response_id: ResponseType) {
        unsafe {
            ffi::gtk_dialog_response(self.as_ref().to_glib_none().0, response_id.to_glib());
        }
    }

    fn run(&self) -> i32 {
        unsafe {
            ffi::gtk_dialog_run(self.as_ref().to_glib_none().0)
        }
    }

    fn set_default_response(&self, response_id: ResponseType) {
        unsafe {
            ffi::gtk_dialog_set_default_response(self.as_ref().to_glib_none().0, response_id.to_glib());
        }
    }

    fn set_response_sensitive(&self, response_id: ResponseType, setting: bool) {
        unsafe {
            ffi::gtk_dialog_set_response_sensitive(self.as_ref().to_glib_none().0, response_id.to_glib(), setting.to_glib());
        }
    }

    fn get_property_use_header_bar(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"use-header-bar\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn connect_close<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"close\0".as_ptr() as *const _,
                Some(transmute(close_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn emit_close(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.to_glib_none().0 as *mut gobject_ffi::GObject).emit("close", &[]).unwrap() };
    }

    fn connect_response<F: Fn(&Self, ResponseType) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"response\0".as_ptr() as *const _,
                Some(transmute(response_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn close_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkDialog, f: glib_ffi::gpointer)
where P: IsA<Dialog> {
    let f: &F = transmute(f);
    f(&Dialog::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn response_trampoline<P, F: Fn(&P, ResponseType) + 'static>(this: *mut ffi::GtkDialog, response_id: ffi::GtkResponseType, f: glib_ffi::gpointer)
where P: IsA<Dialog> {
    let f: &F = transmute(f);
    f(&Dialog::from_glib_borrow(this).unsafe_cast(), from_glib(response_id))
}

impl fmt::Display for Dialog {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Dialog")
    }
}
