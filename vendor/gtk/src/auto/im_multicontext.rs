// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use IMContext;
use ffi;
use glib::GString;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct IMMulticontext(Object<ffi::GtkIMMulticontext, ffi::GtkIMMulticontextClass, IMMulticontextClass>) @extends IMContext;

    match fn {
        get_type => || ffi::gtk_im_multicontext_get_type(),
    }
}

impl IMMulticontext {
    pub fn new() -> IMMulticontext {
        assert_initialized_main_thread!();
        unsafe {
            IMContext::from_glib_full(ffi::gtk_im_multicontext_new()).unsafe_cast()
        }
    }
}

impl Default for IMMulticontext {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_IM_MULTICONTEXT: Option<&IMMulticontext> = None;

pub trait IMMulticontextExt: 'static {
    fn get_context_id(&self) -> Option<GString>;

    fn set_context_id(&self, context_id: &str);
}

impl<O: IsA<IMMulticontext>> IMMulticontextExt for O {
    fn get_context_id(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::gtk_im_multicontext_get_context_id(self.as_ref().to_glib_none().0))
        }
    }

    fn set_context_id(&self, context_id: &str) {
        unsafe {
            ffi::gtk_im_multicontext_set_context_id(self.as_ref().to_glib_none().0, context_id.to_glib_none().0);
        }
    }
}

impl fmt::Display for IMMulticontext {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "IMMulticontext")
    }
}
