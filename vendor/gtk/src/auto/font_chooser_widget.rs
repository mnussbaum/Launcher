// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Box;
use Buildable;
use Container;
use FontChooser;
use Orientable;
use Widget;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct FontChooserWidget(Object<ffi::GtkFontChooserWidget, ffi::GtkFontChooserWidgetClass, FontChooserWidgetClass>) @extends Box, Container, Widget, @implements Buildable, Orientable, FontChooser;

    match fn {
        get_type => || ffi::gtk_font_chooser_widget_get_type(),
    }
}

impl FontChooserWidget {
    pub fn new() -> FontChooserWidget {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_font_chooser_widget_new()).unsafe_cast()
        }
    }
}

impl Default for FontChooserWidget {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_FONT_CHOOSER_WIDGET: Option<&FontChooserWidget> = None;

pub trait FontChooserWidgetExt: 'static {
    //fn get_property_tweak_action(&self) -> /*Ignored*/Option<gio::Action>;

    fn connect_property_tweak_action_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<FontChooserWidget>> FontChooserWidgetExt for O {
    //fn get_property_tweak_action(&self) -> /*Ignored*/Option<gio::Action> {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut gobject_ffi::GObject, b"tweak-action\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get()
    //    }
    //}

    fn connect_property_tweak_action_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::tweak-action\0".as_ptr() as *const _,
                Some(transmute(notify_tweak_action_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn notify_tweak_action_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkFontChooserWidget, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<FontChooserWidget> {
    let f: &F = transmute(f);
    f(&FontChooserWidget::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for FontChooserWidget {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FontChooserWidget")
    }
}
