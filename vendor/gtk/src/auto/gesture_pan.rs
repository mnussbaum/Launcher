// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use EventController;
use Gesture;
use GestureDrag;
use GestureSingle;
use Orientation;
use PanDirection;
use Widget;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct GesturePan(Object<ffi::GtkGesturePan, ffi::GtkGesturePanClass, GesturePanClass>) @extends GestureDrag, GestureSingle, Gesture, EventController;

    match fn {
        get_type => || ffi::gtk_gesture_pan_get_type(),
    }
}

impl GesturePan {
    pub fn new<P: IsA<Widget>>(widget: &P, orientation: Orientation) -> GesturePan {
        skip_assert_initialized!();
        unsafe {
            Gesture::from_glib_full(ffi::gtk_gesture_pan_new(widget.as_ref().to_glib_none().0, orientation.to_glib())).unsafe_cast()
        }
    }
}

pub const NONE_GESTURE_PAN: Option<&GesturePan> = None;

pub trait GesturePanExt: 'static {
    fn get_orientation(&self) -> Orientation;

    fn set_orientation(&self, orientation: Orientation);

    fn connect_pan<F: Fn(&Self, PanDirection, f64) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_orientation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<GesturePan>> GesturePanExt for O {
    fn get_orientation(&self) -> Orientation {
        unsafe {
            from_glib(ffi::gtk_gesture_pan_get_orientation(self.as_ref().to_glib_none().0))
        }
    }

    fn set_orientation(&self, orientation: Orientation) {
        unsafe {
            ffi::gtk_gesture_pan_set_orientation(self.as_ref().to_glib_none().0, orientation.to_glib());
        }
    }

    fn connect_pan<F: Fn(&Self, PanDirection, f64) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"pan\0".as_ptr() as *const _,
                Some(transmute(pan_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_orientation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::orientation\0".as_ptr() as *const _,
                Some(transmute(notify_orientation_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn pan_trampoline<P, F: Fn(&P, PanDirection, f64) + 'static>(this: *mut ffi::GtkGesturePan, direction: ffi::GtkPanDirection, offset: libc::c_double, f: glib_ffi::gpointer)
where P: IsA<GesturePan> {
    let f: &F = transmute(f);
    f(&GesturePan::from_glib_borrow(this).unsafe_cast(), from_glib(direction), offset)
}

unsafe extern "C" fn notify_orientation_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::GtkGesturePan, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<GesturePan> {
    let f: &F = transmute(f);
    f(&GesturePan::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for GesturePan {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "GesturePan")
    }
}
