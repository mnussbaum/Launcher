// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Converter;
use FilterInputStream;
use InputStream;
use PollableInputStream;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct ConverterInputStream(Object<ffi::GConverterInputStream, ffi::GConverterInputStreamClass, ConverterInputStreamClass>) @extends FilterInputStream, InputStream, @implements PollableInputStream;

    match fn {
        get_type => || ffi::g_converter_input_stream_get_type(),
    }
}

impl ConverterInputStream {
    pub fn new<P: IsA<InputStream>, Q: IsA<Converter>>(base_stream: &P, converter: &Q) -> ConverterInputStream {
        unsafe {
            InputStream::from_glib_full(ffi::g_converter_input_stream_new(base_stream.as_ref().to_glib_none().0, converter.as_ref().to_glib_none().0)).unsafe_cast()
        }
    }
}

pub const NONE_CONVERTER_INPUT_STREAM: Option<&ConverterInputStream> = None;

pub trait ConverterInputStreamExt: 'static {
    fn get_converter(&self) -> Option<Converter>;
}

impl<O: IsA<ConverterInputStream>> ConverterInputStreamExt for O {
    fn get_converter(&self) -> Option<Converter> {
        unsafe {
            from_glib_none(ffi::g_converter_input_stream_get_converter(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for ConverterInputStream {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ConverterInputStream")
    }
}
